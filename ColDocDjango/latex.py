#!/usr/bin/env python3

"""See ColDocDjango/latex.py
"""

import os, sys, shutil, subprocess, argparse, json, glob, urllib

from os.path import join as osjoin

if __name__ == '__main__':
    for j in ('','.'):
        while j in sys.path:
            sys.stderr.write('Warning: deleting %r from sys.path\n' % (j,))
            del sys.path[sys.path.index(j)]
    #
    a = os.path.realpath(sys.argv[0])
    a = os.path.dirname(a)
    a = os.path.dirname(a)
    assert os.path.isdir(a), a
    if a not in sys.path:
        sys.path.insert(0, a)
    del a
    #
    from ColDoc import loggin

import logging
logger = logging.getLogger(__name__)

import ColDoc.latex

from gettext import gettext as _

cmd_help = ColDoc.latex.cmd_help + """

    dedup_html
       dedup some parts of HTML generated by PlasTeX, and put a single copy in /static
"""

def main(argv):
    # parse arguments
    COLDOC_SITE_ROOT = os.environ.get('COLDOC_SITE_ROOT')
    parser = ColDoc.latex.prepare_parser(cmd_help=cmd_help)
    parser.add_argument('--coldoc-nick',type=str,\
                        help='nickname for the coldoc document',
                        required=True)
    parser.add_argument('--coldoc-site-root',type=str,\
                        help='root of the coldoc portal', default=COLDOC_SITE_ROOT,
                        required=(COLDOC_SITE_ROOT is None))
    parser.add_argument('--url-UUID',type=str,\
                        required=True,
                        help='URL of the website that will show the UUIDs, used by my \\uuid macro in PDF')
    args = parser.parse_args(argv[1:])
    #
    if args.lang:
        lang = ColDoc.utils.normalize_iso3(args.lang)
        if lang is None or len(lang) != 3:
            print(_('--language %r is not a recognized language code') % args.lang)
            print(_(' Please use ISO_639-3 codes, see https://en.wikipedia.org/wiki/ISO_639-3'))
            sys.exit(2)
        args.lang = lang
    #
    os.environ['COLDOC_SITE_ROOT'] = COLDOC_SITE_ROOT = args.coldoc_site_root = os.path.realpath(args.coldoc_site_root)
    assert os.path.isdir(COLDOC_SITE_ROOT), COLDOC_SITE_ROOT
    #
    args.blobs_dir = blobs_dir = os.path.realpath(osjoin(COLDOC_SITE_ROOT,'coldocs',args.coldoc_nick,'blobs'))
    assert os.path.isdir(args.blobs_dir) , args.blobs_dir
    #
    args.coldoc_dir = coldoc_dir = osjoin(COLDOC_SITE_ROOT,'coldocs',args.coldoc_nick)
    #
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ColDocDjango.settings')
    import django
    django.setup()
    from django.conf import settings as django_settings
    #
    import ColDocApp.models as coldocapp_models
    import UUID.models as  blob_models
    from ColDocDjango.transform import squash_helper_ref
    from UUID.views import _prepare_latex_options
    #
    matches = list(coldocapp_models.DColDoc.objects.filter(nickname = args.coldoc_nick))
    if len(matches) > 1 :
        raise ValueError("Too many ColDoc with nick %r." % (args.coldoc_nick,) )
    coldoc = matches[0]
    #
    # read options
    options = _prepare_latex_options(None, coldoc_dir, blobs_dir, coldoc)
    options['coldoc'] = coldoc
    ### normalzile URL, add path
    url = args.url_UUID
    p =  urllib.parse.urlparse(url)
    a = django.urls.reverse('UUID:index', kwargs={'NICK':coldoc.nickname,'UUID':'000'})[:-4]
    if p.scheme not in ('http','https') or not p.netloc:
        logger.error('Url seems broken: %r',url)
        sys.exit(1)
    if p.path in ( '/', '' ):
        p = p._replace(path=a)
    elif p.path != a:
        logger.warning('Incompatible path in url : %r does not end with %r',url,a)
    options['url_UUID'] = urllib.parse.urlunparse(p)
    #
    options['coldoc_site_root']  = args.coldoc_site_root
    #
    a = osjoin(COLDOC_SITE_ROOT,'config.ini')
    import configparser
    config = configparser.ConfigParser()
    config.read([a])
    for k in 'server_url', 'hostname':
        options[k] = config['django'][k]
    #
    if args.command[0] == 'dedup_html':
        known = set()
        for src in glob.glob(osjoin(blobs_dir,'UUID','*','*','*','*_html')):
            replacements = ColDoc.latex.dedup_html(src, options)
            for a,b in replacements: known.add(b)
        #
        for k in os.listdir(django_settings.DEDUP_ROOT):
            if k not in known:
                logger.warning('Subdir %r of %r is not used anymore, may delete', k, django_settings.DEDUP_ROOT)
        return True
    #
    return ColDoc.latex.main_by_args(args,options)


if __name__ == '__main__':
    ret = main(sys.argv)
    sys.exit(0 if ret else 13)
