# Generated by Django 3.0.5 on 2020-04-30 11:12

import ColDocApp.models
import ColDocDjango.users
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ColDocUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            bases=(models.Model, ColDocDjango.users.BaseColDocUser),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DColDoc',
            fields=[
                ('nickname', models.SlugField(help_text="short string to identify this ColDoc in URLs (alphanumeric only, use '_' or '-' for other chars)", max_length=10, primary_key=True, serialize=False, validators=[ColDocApp.models.validate_coldoc_nickname], verbose_name='short string to identify')),
                ('title', models.CharField(blank=True, max_length=2000)),
                ('abstract', models.TextField(blank=True, max_length=10000)),
                ('publication_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='time first published')),
                ('blob_modification_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='time of last modification of any blob in this coldoc')),
                ('latex_time', models.DateTimeField(default=None, null=True, verbose_name='time of last run of latex')),
                ('latex_return_codes', models.CharField(blank=True, max_length=2000)),
                ('anonymous_can_view', models.BooleanField(default=True)),
                ('latex_engine', models.CharField(choices=[('pdflatex', 'LaTeX'), ('xelatex', 'XeLaTeX'), ('lualatex', 'LuaLaTeX')], default='pdflatex', max_length=15, verbose_name='latex-type command used to compile')),
                ('root_uuid', ColDocApp.models.UUID_Field(default=1)),
                ('editor', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ColDoc',
                'permissions': [('add_blob', 'can add_blob on any coldoc'), ('delete_blob', 'can delete_blob on any coldoc'), ('commit', 'can commit on any coldoc')],
            },
        ),
    ]
